name: Build Container
run-name: Build Container

on:
  workflow_dispatch:
  push:
    paths:
      - 'Dockerfile'
      - 'src/**'
    branches:
      - 'main'
  release:
    types: [published]

jobs:
  docker-buildx:
    runs-on: ubuntu-latest
    env:
      registry: ghcr.io
      image_name: mguyard/import-sfdc-task
      platforms: linux/amd64,linux/arm64

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.registry }}/${{ env.image_name }}
          tags: |
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.event_name == 'release' }}
            type=raw,value=dev-{{branch}}-{{sha}},enable=${{ github.event_name != 'release' }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Test Image
        run: |
          docker run --rm ${{ env.registry }}/${{ env.image_name }}:latest --help

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ env.platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max